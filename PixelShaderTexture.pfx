
sampler2D texture0				: register(s0);
float4 ambientColor				: register(c0);
float4 directionalLightColor	: register(c1);
float4 lightAmbDiffSpecPower	: register(c2);

struct PS_INPUT
{
    float2 texCoords : TEXCOORD0;
    float3 light	 : TEXCOORD1;
    float3 normal	 : TEXCOORD2;
	float3 view		 : TEXCOORD3;
    float4 diffuse   : COLOR0;
    float4 specular  : COLOR1;
    float  fog       : FOG;
};

float4 main(PS_INPUT input) : COLOR0
{
    // Normalize all vectors since they may not be normalized after interpolation
    float3 normal = normalize(input.normal);
    float3 lightDir = normalize(input.light);
    float3 viewDir = normalize(input.view); 
    
    // Calculate diffuse component
    float dotProdNormalLight = dot(normal, lightDir);
    float4 diffuseCoeff = saturate(dotProdNormalLight);

	// Calculate specular component
    float3 reflected = normalize(2 * dotProdNormalLight * normal - lightDir);
    float specularExp = lightAmbDiffSpecPower.w;
    float4 specularCoeff = pow(saturate(dot(reflected, viewDir)), specularExp);
    
    float4 texColor = tex2D(texture0, input.texCoords);

    // Combine all components
    float4 pixelColor = 
		(directionalLightColor * lightAmbDiffSpecPower.x * ambientColor + directionalLightColor * lightAmbDiffSpecPower.y * input.diffuse * diffuseCoeff) * texColor + 
		directionalLightColor * lightAmbDiffSpecPower.z * specularCoeff * input.specular;

	return pixelColor;
}
